// This file is generated. Do not edit
// @generated

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct RPCTraceInfoProto {
    // message fields
    traceId: ::std::option::Option<i64>,
    parentId: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl RPCTraceInfoProto {
    pub fn new() -> RPCTraceInfoProto {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RPCTraceInfoProto {
        static mut instance: ::protobuf::lazy::Lazy<RPCTraceInfoProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RPCTraceInfoProto,
        };
        unsafe {
            instance.get(|| {
                RPCTraceInfoProto {
                    traceId: ::std::option::Option::None,
                    parentId: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 traceId = 1;

    pub fn clear_traceId(&mut self) {
        self.traceId = ::std::option::Option::None;
    }

    pub fn has_traceId(&self) -> bool {
        self.traceId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_traceId(&mut self, v: i64) {
        self.traceId = ::std::option::Option::Some(v);
    }

    pub fn get_traceId<'a>(&self) -> i64 {
        self.traceId.unwrap_or(0)
    }

    // optional int64 parentId = 2;

    pub fn clear_parentId(&mut self) {
        self.parentId = ::std::option::Option::None;
    }

    pub fn has_parentId(&self) -> bool {
        self.parentId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parentId(&mut self, v: i64) {
        self.parentId = ::std::option::Option::Some(v);
    }

    pub fn get_parentId<'a>(&self) -> i64 {
        self.parentId.unwrap_or(0)
    }
}

impl ::protobuf::Message for RPCTraceInfoProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.traceId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_int64());
                    self.parentId = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.traceId.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.parentId.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.traceId {
            try!(os.write_int64(1, v));
        };
        if let Some(v) = self.parentId {
            try!(os.write_int64(2, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RPCTraceInfoProto>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RPCTraceInfoProto {
    fn new() -> RPCTraceInfoProto {
        RPCTraceInfoProto::new()
    }

    fn descriptor_static(_: ::std::option::Option<RPCTraceInfoProto>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "traceId",
                    RPCTraceInfoProto::has_traceId,
                    RPCTraceInfoProto::get_traceId,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "parentId",
                    RPCTraceInfoProto::has_parentId,
                    RPCTraceInfoProto::get_parentId,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RPCTraceInfoProto>(
                    "RPCTraceInfoProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RPCTraceInfoProto {
    fn clear(&mut self) {
        self.clear_traceId();
        self.clear_parentId();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RPCTraceInfoProto {
    fn eq(&self, other: &RPCTraceInfoProto) -> bool {
        self.traceId == other.traceId &&
        self.parentId == other.parentId &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RPCTraceInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct RpcRequestHeaderProto {
    // message fields
    rpcKind: ::std::option::Option<RpcKindProto>,
    rpcOp: ::std::option::Option<RpcRequestHeaderProto_OperationProto>,
    callId: ::std::option::Option<i32>,
    clientId: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    retryCount: ::std::option::Option<i32>,
    traceInfo: ::protobuf::SingularPtrField<RPCTraceInfoProto>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl RpcRequestHeaderProto {
    pub fn new() -> RpcRequestHeaderProto {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RpcRequestHeaderProto {
        static mut instance: ::protobuf::lazy::Lazy<RpcRequestHeaderProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RpcRequestHeaderProto,
        };
        unsafe {
            instance.get(|| {
                RpcRequestHeaderProto {
                    rpcKind: ::std::option::Option::None,
                    rpcOp: ::std::option::Option::None,
                    callId: ::std::option::Option::None,
                    clientId: ::protobuf::SingularField::none(),
                    retryCount: ::std::option::Option::None,
                    traceInfo: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .hadoop.common.RpcKindProto rpcKind = 1;

    pub fn clear_rpcKind(&mut self) {
        self.rpcKind = ::std::option::Option::None;
    }

    pub fn has_rpcKind(&self) -> bool {
        self.rpcKind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpcKind(&mut self, v: RpcKindProto) {
        self.rpcKind = ::std::option::Option::Some(v);
    }

    pub fn get_rpcKind<'a>(&self) -> RpcKindProto {
        self.rpcKind.unwrap_or(RpcKindProto::RPC_BUILTIN)
    }

    // optional .hadoop.common.RpcRequestHeaderProto.OperationProto rpcOp = 2;

    pub fn clear_rpcOp(&mut self) {
        self.rpcOp = ::std::option::Option::None;
    }

    pub fn has_rpcOp(&self) -> bool {
        self.rpcOp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpcOp(&mut self, v: RpcRequestHeaderProto_OperationProto) {
        self.rpcOp = ::std::option::Option::Some(v);
    }

    pub fn get_rpcOp<'a>(&self) -> RpcRequestHeaderProto_OperationProto {
        self.rpcOp.unwrap_or(RpcRequestHeaderProto_OperationProto::RPC_FINAL_PACKET)
    }

    // required sint32 callId = 3;

    pub fn clear_callId(&mut self) {
        self.callId = ::std::option::Option::None;
    }

    pub fn has_callId(&self) -> bool {
        self.callId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callId(&mut self, v: i32) {
        self.callId = ::std::option::Option::Some(v);
    }

    pub fn get_callId<'a>(&self) -> i32 {
        self.callId.unwrap_or(0)
    }

    // required bytes clientId = 4;

    pub fn clear_clientId(&mut self) {
        self.clientId.clear();
    }

    pub fn has_clientId(&self) -> bool {
        self.clientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: ::std::vec::Vec<u8>) {
        self.clientId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientId<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.clientId.is_none() {
            self.clientId.set_default();
        };
        self.clientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientId(&mut self) -> ::std::vec::Vec<u8> {
        self.clientId.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_clientId<'a>(&'a self) -> &'a [u8] {
        match self.clientId.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional sint32 retryCount = 5;

    pub fn clear_retryCount(&mut self) {
        self.retryCount = ::std::option::Option::None;
    }

    pub fn has_retryCount(&self) -> bool {
        self.retryCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retryCount(&mut self, v: i32) {
        self.retryCount = ::std::option::Option::Some(v);
    }

    pub fn get_retryCount<'a>(&self) -> i32 {
        self.retryCount.unwrap_or(-1i32)
    }

    // optional .hadoop.common.RPCTraceInfoProto traceInfo = 6;

    pub fn clear_traceInfo(&mut self) {
        self.traceInfo.clear();
    }

    pub fn has_traceInfo(&self) -> bool {
        self.traceInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_traceInfo(&mut self, v: RPCTraceInfoProto) {
        self.traceInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_traceInfo<'a>(&'a mut self) -> &'a mut RPCTraceInfoProto {
        if self.traceInfo.is_none() {
            self.traceInfo.set_default();
        };
        self.traceInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_traceInfo(&mut self) -> RPCTraceInfoProto {
        self.traceInfo.take().unwrap_or_else(|| RPCTraceInfoProto::new())
    }

    pub fn get_traceInfo<'a>(&'a self) -> &'a RPCTraceInfoProto {
        self.traceInfo.as_ref().unwrap_or_else(|| RPCTraceInfoProto::default_instance())
    }
}

impl ::protobuf::Message for RpcRequestHeaderProto {
    fn is_initialized(&self) -> bool {
        if self.callId.is_none() {
            return false;
        };
        if self.clientId.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.rpcKind = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.rpcOp = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_sint32());
                    self.callId = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.clientId.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_sint32());
                    self.retryCount = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.traceInfo.set_default();
                    try!(is.merge_message(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.rpcKind.iter() {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        for value in self.rpcOp.iter() {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        for value in self.callId.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.clientId.iter() {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        for value in self.retryCount.iter() {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.traceInfo.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.rpcKind {
            try!(os.write_enum(1, v as i32));
        };
        if let Some(v) = self.rpcOp {
            try!(os.write_enum(2, v as i32));
        };
        if let Some(v) = self.callId {
            try!(os.write_sint32(3, v));
        };
        if let Some(v) = self.clientId.as_ref() {
            try!(os.write_bytes(4, &v));
        };
        if let Some(v) = self.retryCount {
            try!(os.write_sint32(5, v));
        };
        if let Some(v) = self.traceInfo.as_ref() {
            try!(os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RpcRequestHeaderProto>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RpcRequestHeaderProto {
    fn new() -> RpcRequestHeaderProto {
        RpcRequestHeaderProto::new()
    }

    fn descriptor_static(_: ::std::option::Option<RpcRequestHeaderProto>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "rpcKind",
                    RpcRequestHeaderProto::has_rpcKind,
                    RpcRequestHeaderProto::get_rpcKind,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "rpcOp",
                    RpcRequestHeaderProto::has_rpcOp,
                    RpcRequestHeaderProto::get_rpcOp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "callId",
                    RpcRequestHeaderProto::has_callId,
                    RpcRequestHeaderProto::get_callId,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "clientId",
                    RpcRequestHeaderProto::has_clientId,
                    RpcRequestHeaderProto::get_clientId,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "retryCount",
                    RpcRequestHeaderProto::has_retryCount,
                    RpcRequestHeaderProto::get_retryCount,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "traceInfo",
                    RpcRequestHeaderProto::has_traceInfo,
                    RpcRequestHeaderProto::get_traceInfo,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RpcRequestHeaderProto>(
                    "RpcRequestHeaderProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RpcRequestHeaderProto {
    fn clear(&mut self) {
        self.clear_rpcKind();
        self.clear_rpcOp();
        self.clear_callId();
        self.clear_clientId();
        self.clear_retryCount();
        self.clear_traceInfo();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RpcRequestHeaderProto {
    fn eq(&self, other: &RpcRequestHeaderProto) -> bool {
        self.rpcKind == other.rpcKind &&
        self.rpcOp == other.rpcOp &&
        self.callId == other.callId &&
        self.clientId == other.clientId &&
        self.retryCount == other.retryCount &&
        self.traceInfo == other.traceInfo &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RpcRequestHeaderProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcRequestHeaderProto_OperationProto {
    RPC_FINAL_PACKET = 0,
    RPC_CONTINUATION_PACKET = 1,
    RPC_CLOSE_CONNECTION = 2,
}

impl ::protobuf::ProtobufEnum for RpcRequestHeaderProto_OperationProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcRequestHeaderProto_OperationProto> {
        match value {
            0 => ::std::option::Option::Some(RpcRequestHeaderProto_OperationProto::RPC_FINAL_PACKET),
            1 => ::std::option::Option::Some(RpcRequestHeaderProto_OperationProto::RPC_CONTINUATION_PACKET),
            2 => ::std::option::Option::Some(RpcRequestHeaderProto_OperationProto::RPC_CLOSE_CONNECTION),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<RpcRequestHeaderProto_OperationProto>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RpcRequestHeaderProto_OperationProto", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RpcRequestHeaderProto_OperationProto {
}

#[derive(Clone,Default)]
pub struct RpcResponseHeaderProto {
    // message fields
    callId: ::std::option::Option<u32>,
    status: ::std::option::Option<RpcResponseHeaderProto_RpcStatusProto>,
    serverIpcVersionNum: ::std::option::Option<u32>,
    exceptionClassName: ::protobuf::SingularField<::std::string::String>,
    errorMsg: ::protobuf::SingularField<::std::string::String>,
    errorDetail: ::std::option::Option<RpcResponseHeaderProto_RpcErrorCodeProto>,
    clientId: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    retryCount: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl RpcResponseHeaderProto {
    pub fn new() -> RpcResponseHeaderProto {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RpcResponseHeaderProto {
        static mut instance: ::protobuf::lazy::Lazy<RpcResponseHeaderProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RpcResponseHeaderProto,
        };
        unsafe {
            instance.get(|| {
                RpcResponseHeaderProto {
                    callId: ::std::option::Option::None,
                    status: ::std::option::Option::None,
                    serverIpcVersionNum: ::std::option::Option::None,
                    exceptionClassName: ::protobuf::SingularField::none(),
                    errorMsg: ::protobuf::SingularField::none(),
                    errorDetail: ::std::option::Option::None,
                    clientId: ::protobuf::SingularField::none(),
                    retryCount: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required uint32 callId = 1;

    pub fn clear_callId(&mut self) {
        self.callId = ::std::option::Option::None;
    }

    pub fn has_callId(&self) -> bool {
        self.callId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callId(&mut self, v: u32) {
        self.callId = ::std::option::Option::Some(v);
    }

    pub fn get_callId<'a>(&self) -> u32 {
        self.callId.unwrap_or(0)
    }

    // required .hadoop.common.RpcResponseHeaderProto.RpcStatusProto status = 2;

    pub fn clear_status(&mut self) {
        self.status = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: RpcResponseHeaderProto_RpcStatusProto) {
        self.status = ::std::option::Option::Some(v);
    }

    pub fn get_status<'a>(&self) -> RpcResponseHeaderProto_RpcStatusProto {
        self.status.unwrap_or(RpcResponseHeaderProto_RpcStatusProto::SUCCESS)
    }

    // optional uint32 serverIpcVersionNum = 3;

    pub fn clear_serverIpcVersionNum(&mut self) {
        self.serverIpcVersionNum = ::std::option::Option::None;
    }

    pub fn has_serverIpcVersionNum(&self) -> bool {
        self.serverIpcVersionNum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serverIpcVersionNum(&mut self, v: u32) {
        self.serverIpcVersionNum = ::std::option::Option::Some(v);
    }

    pub fn get_serverIpcVersionNum<'a>(&self) -> u32 {
        self.serverIpcVersionNum.unwrap_or(0)
    }

    // optional string exceptionClassName = 4;

    pub fn clear_exceptionClassName(&mut self) {
        self.exceptionClassName.clear();
    }

    pub fn has_exceptionClassName(&self) -> bool {
        self.exceptionClassName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exceptionClassName(&mut self, v: ::std::string::String) {
        self.exceptionClassName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exceptionClassName<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.exceptionClassName.is_none() {
            self.exceptionClassName.set_default();
        };
        self.exceptionClassName.as_mut().unwrap()
    }

    // Take field
    pub fn take_exceptionClassName(&mut self) -> ::std::string::String {
        self.exceptionClassName.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_exceptionClassName<'a>(&'a self) -> &'a str {
        match self.exceptionClassName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string errorMsg = 5;

    pub fn clear_errorMsg(&mut self) {
        self.errorMsg.clear();
    }

    pub fn has_errorMsg(&self) -> bool {
        self.errorMsg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorMsg(&mut self, v: ::std::string::String) {
        self.errorMsg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errorMsg<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.errorMsg.is_none() {
            self.errorMsg.set_default();
        };
        self.errorMsg.as_mut().unwrap()
    }

    // Take field
    pub fn take_errorMsg(&mut self) -> ::std::string::String {
        self.errorMsg.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_errorMsg<'a>(&'a self) -> &'a str {
        match self.errorMsg.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .hadoop.common.RpcResponseHeaderProto.RpcErrorCodeProto errorDetail = 6;

    pub fn clear_errorDetail(&mut self) {
        self.errorDetail = ::std::option::Option::None;
    }

    pub fn has_errorDetail(&self) -> bool {
        self.errorDetail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorDetail(&mut self, v: RpcResponseHeaderProto_RpcErrorCodeProto) {
        self.errorDetail = ::std::option::Option::Some(v);
    }

    pub fn get_errorDetail<'a>(&self) -> RpcResponseHeaderProto_RpcErrorCodeProto {
        self.errorDetail.unwrap_or(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_APPLICATION)
    }

    // optional bytes clientId = 7;

    pub fn clear_clientId(&mut self) {
        self.clientId.clear();
    }

    pub fn has_clientId(&self) -> bool {
        self.clientId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: ::std::vec::Vec<u8>) {
        self.clientId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientId<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.clientId.is_none() {
            self.clientId.set_default();
        };
        self.clientId.as_mut().unwrap()
    }

    // Take field
    pub fn take_clientId(&mut self) -> ::std::vec::Vec<u8> {
        self.clientId.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_clientId<'a>(&'a self) -> &'a [u8] {
        match self.clientId.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional sint32 retryCount = 8;

    pub fn clear_retryCount(&mut self) {
        self.retryCount = ::std::option::Option::None;
    }

    pub fn has_retryCount(&self) -> bool {
        self.retryCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retryCount(&mut self, v: i32) {
        self.retryCount = ::std::option::Option::Some(v);
    }

    pub fn get_retryCount<'a>(&self) -> i32 {
        self.retryCount.unwrap_or(-1i32)
    }
}

impl ::protobuf::Message for RpcResponseHeaderProto {
    fn is_initialized(&self) -> bool {
        if self.callId.is_none() {
            return false;
        };
        if self.status.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_uint32());
                    self.callId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.status = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_uint32());
                    self.serverIpcVersionNum = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.exceptionClassName.set_default();
                    try!(is.read_string_into(tmp))
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.errorMsg.set_default();
                    try!(is.read_string_into(tmp))
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.errorDetail = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.clientId.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_sint32());
                    self.retryCount = ::std::option::Option::Some(tmp);
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.callId.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.status.iter() {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        for value in self.serverIpcVersionNum.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.exceptionClassName.iter() {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in self.errorMsg.iter() {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in self.errorDetail.iter() {
            my_size += ::protobuf::rt::enum_size(6, *value);
        };
        for value in self.clientId.iter() {
            my_size += ::protobuf::rt::bytes_size(7, &value);
        };
        for value in self.retryCount.iter() {
            my_size += ::protobuf::rt::value_size(8, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.callId {
            try!(os.write_uint32(1, v));
        };
        if let Some(v) = self.status {
            try!(os.write_enum(2, v as i32));
        };
        if let Some(v) = self.serverIpcVersionNum {
            try!(os.write_uint32(3, v));
        };
        if let Some(v) = self.exceptionClassName.as_ref() {
            try!(os.write_string(4, &v));
        };
        if let Some(v) = self.errorMsg.as_ref() {
            try!(os.write_string(5, &v));
        };
        if let Some(v) = self.errorDetail {
            try!(os.write_enum(6, v as i32));
        };
        if let Some(v) = self.clientId.as_ref() {
            try!(os.write_bytes(7, &v));
        };
        if let Some(v) = self.retryCount {
            try!(os.write_sint32(8, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RpcResponseHeaderProto>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RpcResponseHeaderProto {
    fn new() -> RpcResponseHeaderProto {
        RpcResponseHeaderProto::new()
    }

    fn descriptor_static(_: ::std::option::Option<RpcResponseHeaderProto>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "callId",
                    RpcResponseHeaderProto::has_callId,
                    RpcResponseHeaderProto::get_callId,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "status",
                    RpcResponseHeaderProto::has_status,
                    RpcResponseHeaderProto::get_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "serverIpcVersionNum",
                    RpcResponseHeaderProto::has_serverIpcVersionNum,
                    RpcResponseHeaderProto::get_serverIpcVersionNum,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "exceptionClassName",
                    RpcResponseHeaderProto::has_exceptionClassName,
                    RpcResponseHeaderProto::get_exceptionClassName,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "errorMsg",
                    RpcResponseHeaderProto::has_errorMsg,
                    RpcResponseHeaderProto::get_errorMsg,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "errorDetail",
                    RpcResponseHeaderProto::has_errorDetail,
                    RpcResponseHeaderProto::get_errorDetail,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "clientId",
                    RpcResponseHeaderProto::has_clientId,
                    RpcResponseHeaderProto::get_clientId,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "retryCount",
                    RpcResponseHeaderProto::has_retryCount,
                    RpcResponseHeaderProto::get_retryCount,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RpcResponseHeaderProto>(
                    "RpcResponseHeaderProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RpcResponseHeaderProto {
    fn clear(&mut self) {
        self.clear_callId();
        self.clear_status();
        self.clear_serverIpcVersionNum();
        self.clear_exceptionClassName();
        self.clear_errorMsg();
        self.clear_errorDetail();
        self.clear_clientId();
        self.clear_retryCount();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RpcResponseHeaderProto {
    fn eq(&self, other: &RpcResponseHeaderProto) -> bool {
        self.callId == other.callId &&
        self.status == other.status &&
        self.serverIpcVersionNum == other.serverIpcVersionNum &&
        self.exceptionClassName == other.exceptionClassName &&
        self.errorMsg == other.errorMsg &&
        self.errorDetail == other.errorDetail &&
        self.clientId == other.clientId &&
        self.retryCount == other.retryCount &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RpcResponseHeaderProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcResponseHeaderProto_RpcStatusProto {
    SUCCESS = 0,
    ERROR = 1,
    FATAL = 2,
}

impl ::protobuf::ProtobufEnum for RpcResponseHeaderProto_RpcStatusProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcResponseHeaderProto_RpcStatusProto> {
        match value {
            0 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcStatusProto::SUCCESS),
            1 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcStatusProto::ERROR),
            2 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcStatusProto::FATAL),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<RpcResponseHeaderProto_RpcStatusProto>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RpcResponseHeaderProto_RpcStatusProto", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RpcResponseHeaderProto_RpcStatusProto {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcResponseHeaderProto_RpcErrorCodeProto {
    ERROR_APPLICATION = 1,
    ERROR_NO_SUCH_METHOD = 2,
    ERROR_NO_SUCH_PROTOCOL = 3,
    ERROR_RPC_SERVER = 4,
    ERROR_SERIALIZING_RESPONSE = 5,
    ERROR_RPC_VERSION_MISMATCH = 6,
    FATAL_UNKNOWN = 10,
    FATAL_UNSUPPORTED_SERIALIZATION = 11,
    FATAL_INVALID_RPC_HEADER = 12,
    FATAL_DESERIALIZING_REQUEST = 13,
    FATAL_VERSION_MISMATCH = 14,
    FATAL_UNAUTHORIZED = 15,
}

impl ::protobuf::ProtobufEnum for RpcResponseHeaderProto_RpcErrorCodeProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcResponseHeaderProto_RpcErrorCodeProto> {
        match value {
            1 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_APPLICATION),
            2 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_NO_SUCH_METHOD),
            3 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_NO_SUCH_PROTOCOL),
            4 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_RPC_SERVER),
            5 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_SERIALIZING_RESPONSE),
            6 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::ERROR_RPC_VERSION_MISMATCH),
            10 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNKNOWN),
            11 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNSUPPORTED_SERIALIZATION),
            12 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_INVALID_RPC_HEADER),
            13 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_DESERIALIZING_REQUEST),
            14 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_VERSION_MISMATCH),
            15 => ::std::option::Option::Some(RpcResponseHeaderProto_RpcErrorCodeProto::FATAL_UNAUTHORIZED),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<RpcResponseHeaderProto_RpcErrorCodeProto>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RpcResponseHeaderProto_RpcErrorCodeProto", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RpcResponseHeaderProto_RpcErrorCodeProto {
}

#[derive(Clone,Default)]
pub struct RpcSaslProto {
    // message fields
    version: ::std::option::Option<u32>,
    state: ::std::option::Option<RpcSaslProto_SaslState>,
    token: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    auths: ::protobuf::RepeatedField<RpcSaslProto_SaslAuth>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl RpcSaslProto {
    pub fn new() -> RpcSaslProto {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RpcSaslProto {
        static mut instance: ::protobuf::lazy::Lazy<RpcSaslProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RpcSaslProto,
        };
        unsafe {
            instance.get(|| {
                RpcSaslProto {
                    version: ::std::option::Option::None,
                    state: ::std::option::Option::None,
                    token: ::protobuf::SingularField::none(),
                    auths: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    pub fn get_version<'a>(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    // required .hadoop.common.RpcSaslProto.SaslState state = 2;

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: RpcSaslProto_SaslState) {
        self.state = ::std::option::Option::Some(v);
    }

    pub fn get_state<'a>(&self) -> RpcSaslProto_SaslState {
        self.state.unwrap_or(RpcSaslProto_SaslState::SUCCESS)
    }

    // optional bytes token = 3;

    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.token.is_none() {
            self.token.set_default();
        };
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::vec::Vec<u8> {
        self.token.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_token<'a>(&'a self) -> &'a [u8] {
        match self.token.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated .hadoop.common.RpcSaslProto.SaslAuth auths = 4;

    pub fn clear_auths(&mut self) {
        self.auths.clear();
    }

    // Param is passed by value, moved
    pub fn set_auths(&mut self, v: ::protobuf::RepeatedField<RpcSaslProto_SaslAuth>) {
        self.auths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_auths<'a>(&'a mut self) -> &'a mut ::protobuf::RepeatedField<RpcSaslProto_SaslAuth> {
        &mut self.auths
    }

    // Take field
    pub fn take_auths(&mut self) -> ::protobuf::RepeatedField<RpcSaslProto_SaslAuth> {
        ::std::mem::replace(&mut self.auths, ::protobuf::RepeatedField::new())
    }

    pub fn get_auths<'a>(&'a self) -> &'a [RpcSaslProto_SaslAuth] {
        &self.auths
    }
}

impl ::protobuf::Message for RpcSaslProto {
    fn is_initialized(&self) -> bool {
        if self.state.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_uint32());
                    self.version = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = try!(is.read_enum());
                    self.state = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.token.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.auths));
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.version.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.state.iter() {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        for value in self.token.iter() {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        for value in self.auths.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            try!(os.write_uint32(1, v));
        };
        if let Some(v) = self.state {
            try!(os.write_enum(2, v as i32));
        };
        if let Some(v) = self.token.as_ref() {
            try!(os.write_bytes(3, &v));
        };
        for v in self.auths.iter() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RpcSaslProto>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RpcSaslProto {
    fn new() -> RpcSaslProto {
        RpcSaslProto::new()
    }

    fn descriptor_static(_: ::std::option::Option<RpcSaslProto>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "version",
                    RpcSaslProto::has_version,
                    RpcSaslProto::get_version,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "state",
                    RpcSaslProto::has_state,
                    RpcSaslProto::get_state,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "token",
                    RpcSaslProto::has_token,
                    RpcSaslProto::get_token,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "auths",
                    RpcSaslProto::get_auths,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RpcSaslProto>(
                    "RpcSaslProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RpcSaslProto {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_state();
        self.clear_token();
        self.clear_auths();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RpcSaslProto {
    fn eq(&self, other: &RpcSaslProto) -> bool {
        self.version == other.version &&
        self.state == other.state &&
        self.token == other.token &&
        self.auths == other.auths &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RpcSaslProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct RpcSaslProto_SaslAuth {
    // message fields
    method: ::protobuf::SingularField<::std::string::String>,
    mechanism: ::protobuf::SingularField<::std::string::String>,
    protocol: ::protobuf::SingularField<::std::string::String>,
    serverId: ::protobuf::SingularField<::std::string::String>,
    challenge: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

impl RpcSaslProto_SaslAuth {
    pub fn new() -> RpcSaslProto_SaslAuth {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RpcSaslProto_SaslAuth {
        static mut instance: ::protobuf::lazy::Lazy<RpcSaslProto_SaslAuth> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RpcSaslProto_SaslAuth,
        };
        unsafe {
            instance.get(|| {
                RpcSaslProto_SaslAuth {
                    method: ::protobuf::SingularField::none(),
                    mechanism: ::protobuf::SingularField::none(),
                    protocol: ::protobuf::SingularField::none(),
                    serverId: ::protobuf::SingularField::none(),
                    challenge: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required string method = 1;

    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.method.is_none() {
            self.method.set_default();
        };
        self.method.as_mut().unwrap()
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        self.method.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_method<'a>(&'a self) -> &'a str {
        match self.method.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required string mechanism = 2;

    pub fn clear_mechanism(&mut self) {
        self.mechanism.clear();
    }

    pub fn has_mechanism(&self) -> bool {
        self.mechanism.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mechanism(&mut self, v: ::std::string::String) {
        self.mechanism = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mechanism<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.mechanism.is_none() {
            self.mechanism.set_default();
        };
        self.mechanism.as_mut().unwrap()
    }

    // Take field
    pub fn take_mechanism(&mut self) -> ::std::string::String {
        self.mechanism.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_mechanism<'a>(&'a self) -> &'a str {
        match self.mechanism.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string protocol = 3;

    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    pub fn has_protocol(&self) -> bool {
        self.protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.protocol.is_none() {
            self.protocol.set_default();
        };
        self.protocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        self.protocol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_protocol<'a>(&'a self) -> &'a str {
        match self.protocol.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string serverId = 4;

    pub fn clear_serverId(&mut self) {
        self.serverId.clear();
    }

    pub fn has_serverId(&self) -> bool {
        self.serverId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: ::std::string::String) {
        self.serverId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serverId<'a>(&'a mut self) -> &'a mut ::std::string::String {
        if self.serverId.is_none() {
            self.serverId.set_default();
        };
        self.serverId.as_mut().unwrap()
    }

    // Take field
    pub fn take_serverId(&mut self) -> ::std::string::String {
        self.serverId.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_serverId<'a>(&'a self) -> &'a str {
        match self.serverId.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bytes challenge = 5;

    pub fn clear_challenge(&mut self) {
        self.challenge.clear();
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: ::std::vec::Vec<u8>) {
        self.challenge = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge<'a>(&'a mut self) -> &'a mut ::std::vec::Vec<u8> {
        if self.challenge.is_none() {
            self.challenge.set_default();
        };
        self.challenge.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge(&mut self) -> ::std::vec::Vec<u8> {
        self.challenge.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_challenge<'a>(&'a self) -> &'a [u8] {
        match self.challenge.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for RpcSaslProto_SaslAuth {
    fn is_initialized(&self) -> bool {
        if self.method.is_none() {
            return false;
        };
        if self.mechanism.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.method.set_default();
                    try!(is.read_string_into(tmp))
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.mechanism.set_default();
                    try!(is.read_string_into(tmp))
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.protocol.set_default();
                    try!(is.read_string_into(tmp))
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.serverId.set_default();
                    try!(is.read_string_into(tmp))
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::ProtobufError::WireError("unexpected wire type".to_string()));
                    };
                    let tmp = self.challenge.set_default();
                    try!(is.read_bytes_into(tmp))
                },
                _ => {
                    let unknown = try!(is.read_unknown(wire_type));
                    self.mut_unknown_fields().add_value(field_number, unknown);
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.method.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.mechanism.iter() {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in self.protocol.iter() {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in self.serverId.iter() {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in self.challenge.iter() {
            my_size += ::protobuf::rt::bytes_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.method.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.mechanism.as_ref() {
            try!(os.write_string(2, &v));
        };
        if let Some(v) = self.protocol.as_ref() {
            try!(os.write_string(3, &v));
        };
        if let Some(v) = self.serverId.as_ref() {
            try!(os.write_string(4, &v));
        };
        if let Some(v) = self.challenge.as_ref() {
            try!(os.write_bytes(5, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields<'s>(&'s self) -> &'s ::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields<'s>(&'s mut self) -> &'s mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RpcSaslProto_SaslAuth>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RpcSaslProto_SaslAuth {
    fn new() -> RpcSaslProto_SaslAuth {
        RpcSaslProto_SaslAuth::new()
    }

    fn descriptor_static(_: ::std::option::Option<RpcSaslProto_SaslAuth>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "method",
                    RpcSaslProto_SaslAuth::has_method,
                    RpcSaslProto_SaslAuth::get_method,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "mechanism",
                    RpcSaslProto_SaslAuth::has_mechanism,
                    RpcSaslProto_SaslAuth::get_mechanism,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "protocol",
                    RpcSaslProto_SaslAuth::has_protocol,
                    RpcSaslProto_SaslAuth::get_protocol,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "serverId",
                    RpcSaslProto_SaslAuth::has_serverId,
                    RpcSaslProto_SaslAuth::get_serverId,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "challenge",
                    RpcSaslProto_SaslAuth::has_challenge,
                    RpcSaslProto_SaslAuth::get_challenge,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RpcSaslProto_SaslAuth>(
                    "RpcSaslProto_SaslAuth",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RpcSaslProto_SaslAuth {
    fn clear(&mut self) {
        self.clear_method();
        self.clear_mechanism();
        self.clear_protocol();
        self.clear_serverId();
        self.clear_challenge();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RpcSaslProto_SaslAuth {
    fn eq(&self, other: &RpcSaslProto_SaslAuth) -> bool {
        self.method == other.method &&
        self.mechanism == other.mechanism &&
        self.protocol == other.protocol &&
        self.serverId == other.serverId &&
        self.challenge == other.challenge &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RpcSaslProto_SaslAuth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcSaslProto_SaslState {
    SUCCESS = 0,
    NEGOTIATE = 1,
    INITIATE = 2,
    CHALLENGE = 3,
    RESPONSE = 4,
    WRAP = 5,
}

impl ::protobuf::ProtobufEnum for RpcSaslProto_SaslState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcSaslProto_SaslState> {
        match value {
            0 => ::std::option::Option::Some(RpcSaslProto_SaslState::SUCCESS),
            1 => ::std::option::Option::Some(RpcSaslProto_SaslState::NEGOTIATE),
            2 => ::std::option::Option::Some(RpcSaslProto_SaslState::INITIATE),
            3 => ::std::option::Option::Some(RpcSaslProto_SaslState::CHALLENGE),
            4 => ::std::option::Option::Some(RpcSaslProto_SaslState::RESPONSE),
            5 => ::std::option::Option::Some(RpcSaslProto_SaslState::WRAP),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<RpcSaslProto_SaslState>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RpcSaslProto_SaslState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RpcSaslProto_SaslState {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcKindProto {
    RPC_BUILTIN = 0,
    RPC_WRITABLE = 1,
    RPC_PROTOCOL_BUFFER = 2,
}

impl ::protobuf::ProtobufEnum for RpcKindProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcKindProto> {
        match value {
            0 => ::std::option::Option::Some(RpcKindProto::RPC_BUILTIN),
            1 => ::std::option::Option::Some(RpcKindProto::RPC_WRITABLE),
            2 => ::std::option::Option::Some(RpcKindProto::RPC_PROTOCOL_BUFFER),
            _ => ::std::option::Option::None
        }
    }

    fn enum_descriptor_static(_: Option<RpcKindProto>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RpcKindProto", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RpcKindProto {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0f, 0x52, 0x70, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x12, 0x0d, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
    0x22, 0x36, 0x0a, 0x11, 0x52, 0x50, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
    0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x12, 0x10, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
    0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x22, 0xd7, 0x02, 0x0a, 0x15, 0x52, 0x70, 0x63,
    0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f,
    0x74, 0x6f, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x70, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
    0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
    0x12, 0x42, 0x0a, 0x05, 0x72, 0x70, 0x63, 0x4f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
    0x33, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
    0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
    0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
    0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x03,
    0x20, 0x02, 0x28, 0x11, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
    0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x16, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43,
    0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x02, 0x2d, 0x31, 0x12, 0x33,
    0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
    0x6e, 0x2e, 0x52, 0x50, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72,
    0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x50, 0x43, 0x5f, 0x46, 0x49, 0x4e,
    0x41, 0x4c, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52,
    0x50, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
    0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x50, 0x43, 0x5f,
    0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
    0x10, 0x02, 0x22, 0xca, 0x05, 0x0a, 0x16, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
    0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x44, 0x0a,
    0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x34, 0x2e,
    0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70,
    0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
    0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
    0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x63,
    0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
    0x12, 0x1a, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
    0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 0x10, 0x0a, 0x08,
    0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x4c,
    0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
    0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
    0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72,
    0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x08,
    0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x16,
    0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
    0x28, 0x11, 0x3a, 0x02, 0x2d, 0x31, 0x22, 0x33, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61,
    0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
    0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
    0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xe1, 0x02, 0x0a, 0x11,
    0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
    0x6f, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
    0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f,
    0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
    0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53,
    0x55, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x14,
    0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56,
    0x45, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45,
    0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
    0x53, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x50,
    0x43, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
    0x43, 0x48, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x55, 0x4e,
    0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x41, 0x54, 0x41, 0x4c,
    0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52,
    0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18,
    0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x50,
    0x43, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x41,
    0x54, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e,
    0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x46,
    0x41, 0x54, 0x41, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53,
    0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x54, 0x41, 0x4c,
    0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x0f, 0x22,
    0xdd, 0x02, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x53, 0x61, 0x73, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
    0x12, 0x0f, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x0d, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
    0x32, 0x25, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
    0x2e, 0x52, 0x70, 0x63, 0x53, 0x61, 0x73, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61,
    0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
    0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18,
    0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63,
    0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x61, 0x73, 0x6c, 0x50, 0x72, 0x6f,
    0x74, 0x6f, 0x2e, 0x53, 0x61, 0x73, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x64, 0x0a, 0x08, 0x53,
    0x61, 0x73, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
    0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x12, 0x11, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61,
    0x6e, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x12, 0x10, 0x0a, 0x08, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x10, 0x0a, 0x08,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11,
    0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
    0x0c, 0x22, 0x5c, 0x0a, 0x09, 0x53, 0x61, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
    0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
    0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
    0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4c,
    0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f,
    0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x52, 0x41, 0x50, 0x10, 0x05, 0x2a,
    0x4a, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x0f, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x10, 0x00,
    0x12, 0x10, 0x0a, 0x0c, 0x52, 0x50, 0x43, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45,
    0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x50, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
    0x4f, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x02, 0x42, 0x34, 0x0a, 0x1e, 0x6f,
    0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
    0x2e, 0x69, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x0f, 0x52,
    0x70, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xa0, 0x01,
    0x01, 0x4a, 0xff, 0x32, 0x0a, 0x07, 0x12, 0x05, 0x18, 0x00, 0xab, 0x01, 0x01, 0x0a, 0x08, 0x0a,
    0x01, 0x08, 0x12, 0x03, 0x18, 0x00, 0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12,
    0x03, 0x18, 0x00, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x18,
    0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x18, 0x07,
    0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x18, 0x07,
    0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x18, 0x16, 0x36, 0x0a,
    0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x19, 0x00, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07,
    0x01, 0x12, 0x03, 0x19, 0x00, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12,
    0x03, 0x19, 0x07, 0x1b, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03,
    0x19, 0x07, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x19, 0x07, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x07, 0x12, 0x03, 0x19, 0x1e,
    0x2f, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x1a, 0x00, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x08,
    0xe7, 0x07, 0x02, 0x12, 0x03, 0x1a, 0x00, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02,
    0x02, 0x12, 0x03, 0x1a, 0x07, 0x24, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00,
    0x12, 0x03, 0x1a, 0x07, 0x24, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x02, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x1a, 0x07, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x02, 0x03, 0x12, 0x03,
    0x1a, 0x27, 0x2b, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x1b, 0x08, 0x15, 0x0a, 0x58, 0x0a,
    0x02, 0x05, 0x00, 0x12, 0x04, 0x2f, 0x00, 0x33, 0x01, 0x1a, 0x4c, 0x2a, 0x0a, 0x20, 0x52, 0x70,
    0x63, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x72, 0x70, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x70, 0x63, 0x20, 0x72,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03,
    0x2f, 0x05, 0x11, 0x0a, 0x2f, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x30, 0x02, 0x1b,
    0x22, 0x22, 0x20, 0x55, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x75, 0x69, 0x6c,
    0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x65,
    0x73, 0x74, 0x73, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x30,
    0x02, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x30, 0x19, 0x1a,
    0x0a, 0x25, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x31, 0x02, 0x1b, 0x22, 0x18, 0x20,
    0x55, 0x73, 0x65, 0x20, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x45,
    0x6e, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x31, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03,
    0x31, 0x19, 0x1a, 0x0a, 0x24, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x02, 0x12, 0x03, 0x32, 0x02, 0x1b,
    0x22, 0x17, 0x20, 0x55, 0x73, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x52,
    0x70, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x32, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x02,
    0x12, 0x03, 0x32, 0x19, 0x1a, 0x0a, 0xd8, 0x02, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x3e, 0x00,
    0x41, 0x01, 0x1a, 0xcb, 0x02, 0x2a, 0x0a, 0x20, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x70, 0x61, 0x73, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x65, 0x63,
    0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
    0x75, 0x65, 0x0a, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65,
    0x72, 0x20, 0x61, 0x6e, 0x20, 0x52, 0x50, 0x43, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65,
    0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x77, 0x65, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x69, 0x73,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x0a, 0x20, 0x28, 0x73,
    0x6f, 0x20, 0x77, 0x65, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76,
    0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x20,
    0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x29, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x0a,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x6e,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x77, 0x61,
    0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x6f, 0x20, 0x77, 0x65, 0x20, 0x6b, 0x6e,
    0x6f, 0x77, 0x0a, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x61,
    0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x70, 0x61,
    0x6e, 0x20, 0x77, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
    0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2e, 0x0a,
    0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x3e, 0x08, 0x19, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x3f, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x04, 0x12, 0x03, 0x3f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05,
    0x12, 0x03, 0x3f, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x3f, 0x11, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x3f, 0x1b,
    0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x40, 0x02, 0x1e, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x40, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x40, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x40, 0x11, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x40, 0x1c, 0x1d, 0x0a, 0x2b, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x43, 0x00,
    0x52, 0x01, 0x22, 0x1f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x43, 0x08, 0x1d, 0x0a,
    0x0c, 0x0a, 0x04, 0x04, 0x01, 0x04, 0x00, 0x12, 0x04, 0x44, 0x02, 0x48, 0x03, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x04, 0x00, 0x01, 0x12, 0x03, 0x44, 0x07, 0x15, 0x0a, 0x25, 0x0a, 0x06, 0x04,
    0x01, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x45, 0x04, 0x20, 0x22, 0x16, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x52, 0x50, 0x43, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65,
    0x74, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x45,
    0x04, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x45,
    0x1e, 0x1f, 0x0a, 0x24, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x46, 0x04,
    0x20, 0x22, 0x15, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
    0x74, 0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x46, 0x04, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00,
    0x02, 0x01, 0x02, 0x12, 0x03, 0x46, 0x1e, 0x1f, 0x0a, 0x29, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00,
    0x02, 0x02, 0x12, 0x03, 0x47, 0x04, 0x21, 0x22, 0x1a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x72, 0x70, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x47, 0x04, 0x18, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03,
    0x47, 0x1f, 0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x4a, 0x02, 0x24,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x4a, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x4a, 0x0b, 0x17, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x4a, 0x18, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x4a, 0x22, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01,
    0x12, 0x03, 0x4b, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03,
    0x4b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x4b, 0x0b,
    0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4b, 0x1a, 0x1f, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x4b, 0x22, 0x23, 0x0a, 0x3e, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x4c, 0x02, 0x1d, 0x22, 0x31, 0x20, 0x61, 0x20, 0x73,
    0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74,
    0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x61, 0x63, 0x6b,
    0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x02, 0x04, 0x12, 0x03, 0x4c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x02, 0x05, 0x12, 0x03, 0x4c, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x4c, 0x12, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x03,
    0x12, 0x03, 0x4c, 0x1b, 0x1c, 0x0a, 0x28, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03, 0x4d,
    0x02, 0x1e, 0x22, 0x1b, 0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x6e,
    0x69, 0x71, 0x75, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x03, 0x04, 0x12, 0x03, 0x4d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x03, 0x05, 0x12, 0x03, 0x4d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x4d, 0x11, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x03, 0x03, 0x12, 0x03, 0x4d, 0x1c, 0x1d, 0x0a, 0x6c, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x04, 0x12,
    0x03, 0x50, 0x02, 0x30, 0x1a, 0x5f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20,
    0x2b, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c,
    0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x72,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x0a, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f,
    0x75, 0x6e, 0x74, 0x2c, 0x20, 0x31, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x72,
    0x65, 0x74, 0x72, 0x79, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x04, 0x12, 0x03,
    0x50, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x05, 0x12, 0x03, 0x50, 0x0b,
    0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x50, 0x12, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x04, 0x03, 0x12, 0x03, 0x50, 0x1f, 0x20, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x04, 0x08, 0x12, 0x03, 0x50, 0x21, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x04, 0x07, 0x12, 0x03, 0x50, 0x2c, 0x2e, 0x0a, 0x1b, 0x0a, 0x04, 0x04, 0x01, 0x02,
    0x05, 0x12, 0x03, 0x51, 0x02, 0x2b, 0x22, 0x0e, 0x20, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x04, 0x12,
    0x03, 0x51, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x06, 0x12, 0x03, 0x51,
    0x0b, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x51, 0x1d, 0x26,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x05, 0x03, 0x12, 0x03, 0x51, 0x29, 0x2a, 0x0a, 0xcb,
    0x09, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x05, 0x69, 0x00, 0x93, 0x01, 0x01, 0x1a, 0xaf, 0x08, 0x2a,
    0x0a, 0x20, 0x52, 0x70, 0x63, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x48,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x0a, 0x20, 0x2b, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2b, 0x0a, 0x20, 0x7c, 0x20, 0x52,
    0x70, 0x63, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65,
    0x73, 0x20, 0x28, 0x34, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x29, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x7c, 0x0a, 0x20, 0x7c, 0x20, 0x20, 0x28, 0x73, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x65,
    0x78, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x74, 0x73, 0x29, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x20, 0x2b, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2b, 0x0a, 0x20, 0x7c,
    0x20, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
    0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
    0x69, 0x7a, 0x65, 0x64, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x69,
    0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6c, 0x65, 0x6e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x7c, 0x0a, 0x20, 0x2b, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2b, 0x0a, 0x20, 0x7c, 0x20, 0x69, 0x66, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
    0x73, 0x73, 0x66, 0x75, 0x6c, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a,
    0x20, 0x7c, 0x20, 0x20, 0x20, 0x2d, 0x20, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x20, 0x2d, 0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
    0x20, 0x72, 0x70, 0x63, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x20, 0x62,
    0x79, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x20, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x20, 0x7c, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x62,
    0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x70, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x50,
    0x72, 0x6f, 0x74, 0x6f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x7c, 0x0a, 0x20, 0x7c, 0x20, 0x69, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
    0x66, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x20, 0x7c, 0x20, 0x20, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x72, 0x70, 0x63, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x68, 0x65,
    0x61, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x66, 0x6f,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x0a, 0x20, 0x2b,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2b, 0x0a, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
    0x72, 0x70, 0x63, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x68, 0x65, 0x61,
    0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x64,
    0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x73, 0x65, 0x74, 0x75, 0x70, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x20, 0x0a, 0x20,
    0x49, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
    0x6c, 0x6f, 0x6f, 0x6b, 0x73, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x72, 0x70, 0x63,
    0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
    0x20, 0x66, 0x61, 0x6b, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x2e, 0x0a, 0x22, 0x8b,
    0x01, 0x2a, 0x0a, 0x20, 0x0a, 0x20, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x73, 0x74, 0x75, 0x73,
    0x20, 0x2d, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x61,
    0x69, 0x6c, 0x75, 0x72, 0x65, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x27, 0x73, 0x20, 0x65, 0x72, 0x72, 0x44, 0x65,
    0x74, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
    0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x72,
    0x72, 0x4d, 0x73, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x0a, 0x20, 0x66,
    0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0a, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x02, 0x01, 0x12, 0x03, 0x69, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x02, 0x04, 0x00,
    0x12, 0x04, 0x71, 0x02, 0x75, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x04, 0x00, 0x01, 0x12,
    0x03, 0x71, 0x07, 0x15, 0x0a, 0x1e, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x72, 0x03, 0x0f, 0x22, 0x0f, 0x20, 0x52, 0x50, 0x43, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
    0x64, 0x65, 0x64, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x72, 0x03, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x72, 0x0d, 0x0e, 0x0a, 0x45, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03,
    0x73, 0x03, 0x0d, 0x22, 0x36, 0x20, 0x52, 0x50, 0x43, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x72, 0x72,
    0x6f, 0x72, 0x20, 0x2d, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x6c, 0x65, 0x66, 0x74, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x75,
    0x74, 0x75, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x73, 0x03, 0x08, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x73, 0x0b, 0x0c, 0x0a, 0x30, 0x0a, 0x06, 0x04,
    0x02, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x74, 0x03, 0x0d, 0x22, 0x21, 0x20, 0x46, 0x61, 0x74,
    0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x0a, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x74, 0x03, 0x08, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x74, 0x0b, 0x0c, 0x0a, 0x0d, 0x0a,
    0x04, 0x04, 0x02, 0x04, 0x01, 0x12, 0x05, 0x77, 0x02, 0x89, 0x01, 0x03, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x04, 0x01, 0x01, 0x12, 0x03, 0x77, 0x07, 0x18, 0x0a, 0x78, 0x0a, 0x06, 0x04, 0x02,
    0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x7a, 0x03, 0x19, 0x1a, 0x41, 0x20, 0x4e, 0x6f, 0x6e, 0x2d,
    0x66, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x52, 0x70, 0x63, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
    0x2d, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x65, 0x66,
    0x74, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72,
    0x65, 0x20, 0x72, 0x70, 0x63, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x0a, 0x22, 0x26, 0x20, 0x52,
    0x50, 0x43, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x2d, 0x20, 0x72, 0x70, 0x63, 0x20,
    0x61, 0x70, 0x70, 0x20, 0x74, 0x68, 0x72, 0x65, 0x77, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
    0x69, 0x6f, 0x6e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x7a, 0x03, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x7a, 0x17, 0x18, 0x0a, 0x2b, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03,
    0x7b, 0x03, 0x1c, 0x22, 0x1c, 0x20, 0x52, 0x70, 0x63, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
    0x2d, 0x20, 0x6e, 0x6f, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
    0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x7b, 0x03,
    0x17, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x7b, 0x1a,
    0x1b, 0x0a, 0x2d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x7c, 0x03, 0x1e,
    0x22, 0x1e, 0x20, 0x52, 0x70, 0x63, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x6e,
    0x6f, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x0a,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x7c, 0x03, 0x19,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x7c, 0x1c, 0x1d,
    0x0a, 0x29, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03, 0x7d, 0x03, 0x19, 0x22,
    0x1a, 0x20, 0x52, 0x70, 0x63, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x04, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x7d, 0x03, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x04, 0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x7d, 0x17, 0x18, 0x0a, 0x2b, 0x0a, 0x06, 0x04,
    0x02, 0x04, 0x01, 0x02, 0x04, 0x12, 0x03, 0x7e, 0x03, 0x22, 0x22, 0x1c, 0x20, 0x65, 0x72, 0x72,
    0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x67, 0x6e, 0x20, 0x72,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x04, 0x01, 0x12, 0x03, 0x7e, 0x03, 0x1d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x04, 0x02, 0x12, 0x03, 0x7e, 0x20, 0x21, 0x0a, 0x2e, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x05, 0x12, 0x03, 0x7f, 0x03, 0x22, 0x22, 0x1f, 0x20, 0x52, 0x70, 0x63, 0x20, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
    0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x05, 0x01, 0x12, 0x03, 0x7f, 0x03, 0x1d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x05, 0x02, 0x12, 0x03, 0x7f, 0x20, 0x21, 0x0a, 0x58, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x06, 0x12, 0x04, 0x83, 0x01, 0x03, 0x16, 0x1a, 0x31, 0x20, 0x46, 0x61, 0x74, 0x61, 0x6c,
    0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x52, 0x70, 0x63,
    0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x0a, 0x22, 0x15, 0x20, 0x75, 0x6e,
    0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f,
    0x72, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x06, 0x01, 0x12, 0x04, 0x83,
    0x01, 0x03, 0x10, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x06, 0x02, 0x12, 0x04,
    0x83, 0x01, 0x13, 0x15, 0x0a, 0x35, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01, 0x02, 0x07, 0x12, 0x04,
    0x84, 0x01, 0x03, 0x28, 0x22, 0x25, 0x20, 0x49, 0x50, 0x43, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72,
    0x20, 0x73, 0x65, 0x72, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x79,
    0x70, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x02, 0x04, 0x01, 0x02, 0x07, 0x01, 0x12, 0x04, 0x84, 0x01, 0x03, 0x22, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x02, 0x04, 0x01, 0x02, 0x07, 0x02, 0x12, 0x04, 0x84, 0x01, 0x25, 0x27, 0x0a, 0x31, 0x0a,
    0x06, 0x04, 0x02, 0x04, 0x01, 0x02, 0x08, 0x12, 0x04, 0x85, 0x01, 0x03, 0x21, 0x22, 0x21, 0x20,
    0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x52, 0x70, 0x63, 0x48, 0x65, 0x61,
    0x64, 0x65, 0x72, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x0a,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x08, 0x01, 0x12, 0x04, 0x85, 0x01, 0x03,
    0x1b, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x08, 0x02, 0x12, 0x04, 0x85, 0x01,
    0x1e, 0x20, 0x0a, 0x32, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01, 0x02, 0x09, 0x12, 0x04, 0x86, 0x01,
    0x03, 0x24, 0x22, 0x22, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64,
    0x65, 0x73, 0x65, 0x72, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x20, 0x72, 0x70, 0x63, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x09,
    0x01, 0x12, 0x04, 0x86, 0x01, 0x03, 0x1e, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02,
    0x09, 0x02, 0x12, 0x04, 0x86, 0x01, 0x21, 0x23, 0x0a, 0x2c, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x0a, 0x12, 0x04, 0x87, 0x01, 0x03, 0x1f, 0x22, 0x1c, 0x20, 0x49, 0x70, 0x63, 0x20, 0x4c,
    0x61, 0x79, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
    0x6d, 0x61, 0x74, 0x63, 0x68, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02, 0x0a,
    0x01, 0x12, 0x04, 0x87, 0x01, 0x03, 0x19, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02,
    0x0a, 0x02, 0x12, 0x04, 0x87, 0x01, 0x1c, 0x1e, 0x0a, 0x1d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x0b, 0x12, 0x04, 0x88, 0x01, 0x03, 0x1b, 0x22, 0x0d, 0x20, 0x41, 0x75, 0x74, 0x68, 0x20,
    0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01, 0x02,
    0x0b, 0x01, 0x12, 0x04, 0x88, 0x01, 0x03, 0x15, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x01,
    0x02, 0x0b, 0x02, 0x12, 0x04, 0x88, 0x01, 0x18, 0x1a, 0x0a, 0x26, 0x0a, 0x04, 0x04, 0x02, 0x02,
    0x00, 0x12, 0x04, 0x8b, 0x01, 0x02, 0x1d, 0x22, 0x18, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x04, 0x8b, 0x01, 0x02, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05, 0x12, 0x04, 0x8b, 0x01, 0x0b, 0x11, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x04, 0x8b, 0x01, 0x12, 0x18, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x04, 0x8b, 0x01, 0x1b, 0x1c, 0x0a, 0x0c, 0x0a,
    0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x04, 0x8c, 0x01, 0x02, 0x25, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x01, 0x04, 0x12, 0x04, 0x8c, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x01, 0x06, 0x12, 0x04, 0x8c, 0x01, 0x0b, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x01, 0x01, 0x12, 0x04, 0x8c, 0x01, 0x1a, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01,
    0x03, 0x12, 0x04, 0x8c, 0x01, 0x23, 0x24, 0x0a, 0x27, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12,
    0x04, 0x8d, 0x01, 0x02, 0x2a, 0x22, 0x19, 0x20, 0x53, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x66, 0x20,
    0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x04, 0x8d, 0x01, 0x02, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x05, 0x12, 0x04, 0x8d, 0x01, 0x0b, 0x11, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x04, 0x8d, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x04, 0x8d, 0x01, 0x28, 0x29, 0x0a, 0x20, 0x0a, 0x04,
    0x04, 0x02, 0x02, 0x03, 0x12, 0x04, 0x8e, 0x01, 0x02, 0x29, 0x22, 0x12, 0x20, 0x69, 0x66, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x04, 0x12, 0x04, 0x8e, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x03, 0x05, 0x12, 0x04, 0x8e, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x03, 0x01, 0x12, 0x04, 0x8e, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x03, 0x03, 0x12, 0x04, 0x8e, 0x01, 0x27, 0x28, 0x0a, 0x3d, 0x0a, 0x04, 0x04, 0x02,
    0x02, 0x04, 0x12, 0x04, 0x8f, 0x01, 0x02, 0x1f, 0x22, 0x2f, 0x20, 0x69, 0x66, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x2c, 0x20, 0x6f, 0x66, 0x74,
    0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x73, 0x74, 0x72, 0x61,
    0x63, 0x6b, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x04, 0x04, 0x12, 0x04, 0x8f, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x04,
    0x05, 0x12, 0x04, 0x8f, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x04, 0x01,
    0x12, 0x04, 0x8f, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x04, 0x03, 0x12,
    0x04, 0x8f, 0x01, 0x1d, 0x1e, 0x0a, 0x20, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x05, 0x12, 0x04, 0x90,
    0x01, 0x02, 0x2d, 0x22, 0x12, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66,
    0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x04,
    0x12, 0x04, 0x90, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x06, 0x12,
    0x04, 0x90, 0x01, 0x0b, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x01, 0x12, 0x04,
    0x90, 0x01, 0x1d, 0x28, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x03, 0x12, 0x04, 0x90,
    0x01, 0x2b, 0x2c, 0x0a, 0x29, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x06, 0x12, 0x04, 0x91, 0x01, 0x02,
    0x1e, 0x22, 0x1b, 0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69,
    0x71, 0x75, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x04, 0x12, 0x04, 0x91, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x06, 0x05, 0x12, 0x04, 0x91, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x06, 0x01, 0x12, 0x04, 0x91, 0x01, 0x11, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x06, 0x03, 0x12, 0x04, 0x91, 0x01, 0x1c, 0x1d, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x02,
    0x02, 0x07, 0x12, 0x04, 0x92, 0x01, 0x02, 0x30, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x07,
    0x04, 0x12, 0x04, 0x92, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x07, 0x05,
    0x12, 0x04, 0x92, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x07, 0x01, 0x12,
    0x04, 0x92, 0x01, 0x12, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x07, 0x03, 0x12, 0x04,
    0x92, 0x01, 0x1f, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x07, 0x08, 0x12, 0x04, 0x92,
    0x01, 0x21, 0x2f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x07, 0x07, 0x12, 0x04, 0x92, 0x01,
    0x2c, 0x2e, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x06, 0x95, 0x01, 0x00, 0xab, 0x01, 0x01,
    0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x04, 0x95, 0x01, 0x08, 0x14, 0x0a, 0x0e, 0x0a,
    0x04, 0x04, 0x03, 0x04, 0x00, 0x12, 0x06, 0x96, 0x01, 0x02, 0x9d, 0x01, 0x03, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x03, 0x04, 0x00, 0x01, 0x12, 0x04, 0x96, 0x01, 0x07, 0x10, 0x0a, 0x0e, 0x0a, 0x06,
    0x04, 0x03, 0x04, 0x00, 0x02, 0x00, 0x12, 0x04, 0x97, 0x01, 0x04, 0x12, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x03, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0x97, 0x01, 0x04, 0x0b, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x04, 0x97, 0x01, 0x10, 0x11, 0x0a, 0x0e,
    0x0a, 0x06, 0x04, 0x03, 0x04, 0x00, 0x02, 0x01, 0x12, 0x04, 0x98, 0x01, 0x04, 0x12, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0x98, 0x01, 0x04, 0x0d, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x04, 0x98, 0x01, 0x10, 0x11,
    0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x03, 0x04, 0x00, 0x02, 0x02, 0x12, 0x04, 0x99, 0x01, 0x04, 0x12,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0x99, 0x01, 0x04,
    0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x04, 0x99, 0x01,
    0x10, 0x11, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x03, 0x04, 0x00, 0x02, 0x03, 0x12, 0x04, 0x9a, 0x01,
    0x04, 0x12, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x04, 0x9a,
    0x01, 0x04, 0x0d, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x04,
    0x9a, 0x01, 0x10, 0x11, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x03, 0x04, 0x00, 0x02, 0x04, 0x12, 0x04,
    0x9b, 0x01, 0x04, 0x12, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12,
    0x04, 0x9b, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x04, 0x02,
    0x12, 0x04, 0x9b, 0x01, 0x10, 0x11, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x03, 0x04, 0x00, 0x02, 0x05,
    0x12, 0x04, 0x9c, 0x01, 0x04, 0x0d, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02, 0x05,
    0x01, 0x12, 0x04, 0x9c, 0x01, 0x04, 0x08, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x04, 0x00, 0x02,
    0x05, 0x02, 0x12, 0x04, 0x9c, 0x01, 0x0b, 0x0c, 0x0a, 0x0e, 0x0a, 0x04, 0x04, 0x03, 0x03, 0x00,
    0x12, 0x06, 0x9f, 0x01, 0x02, 0xa5, 0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x03, 0x00,
    0x01, 0x12, 0x04, 0x9f, 0x01, 0x0a, 0x12, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02,
    0x00, 0x12, 0x04, 0xa0, 0x01, 0x04, 0x22, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02,
    0x00, 0x04, 0x12, 0x04, 0xa0, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00,
    0x02, 0x00, 0x05, 0x12, 0x04, 0xa0, 0x01, 0x0d, 0x13, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0xa0, 0x01, 0x14, 0x1a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03,
    0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x04, 0xa0, 0x01, 0x20, 0x21, 0x0a, 0x0e, 0x0a, 0x06, 0x04,
    0x03, 0x03, 0x00, 0x02, 0x01, 0x12, 0x04, 0xa1, 0x01, 0x04, 0x22, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x03, 0x03, 0x00, 0x02, 0x01, 0x04, 0x12, 0x04, 0xa1, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x05, 0x12, 0x04, 0xa1, 0x01, 0x0d, 0x13, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0xa1, 0x01, 0x14, 0x1d, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x01, 0x03, 0x12, 0x04, 0xa1, 0x01, 0x20, 0x21, 0x0a,
    0x0e, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x12, 0x04, 0xa2, 0x01, 0x04, 0x22, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x04, 0x12, 0x04, 0xa2, 0x01, 0x04, 0x0c,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x05, 0x12, 0x04, 0xa2, 0x01, 0x0d,
    0x13, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0xa2, 0x01,
    0x14, 0x1c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x02, 0x03, 0x12, 0x04, 0xa2,
    0x01, 0x20, 0x21, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02, 0x03, 0x12, 0x04, 0xa3,
    0x01, 0x04, 0x22, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x03, 0x04, 0x12, 0x04,
    0xa3, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x03, 0x05, 0x12,
    0x04, 0xa3, 0x01, 0x0d, 0x13, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x03, 0x01,
    0x12, 0x04, 0xa3, 0x01, 0x14, 0x1c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02, 0x03,
    0x03, 0x12, 0x04, 0xa3, 0x01, 0x20, 0x21, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x03, 0x03, 0x00, 0x02,
    0x04, 0x12, 0x04, 0xa4, 0x01, 0x04, 0x22, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00, 0x02,
    0x04, 0x04, 0x12, 0x04, 0xa4, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03, 0x00,
    0x02, 0x04, 0x05, 0x12, 0x04, 0xa4, 0x01, 0x0d, 0x12, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03, 0x03,
    0x00, 0x02, 0x04, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x14, 0x1d, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x03,
    0x03, 0x00, 0x02, 0x04, 0x03, 0x12, 0x04, 0xa4, 0x01, 0x20, 0x21, 0x0a, 0x0c, 0x0a, 0x04, 0x04,
    0x03, 0x02, 0x00, 0x12, 0x04, 0xa7, 0x01, 0x02, 0x1f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x00, 0x04, 0x12, 0x04, 0xa7, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00,
    0x05, 0x12, 0x04, 0xa7, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01,
    0x12, 0x04, 0xa7, 0x01, 0x12, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12,
    0x04, 0xa7, 0x01, 0x1d, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01, 0x12, 0x04, 0xa8,
    0x01, 0x02, 0x1f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x04, 0xa8, 0x01,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x06, 0x12, 0x04, 0xa8, 0x01, 0x0b,
    0x14, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x04, 0xa8, 0x01, 0x15, 0x1a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x04, 0xa8, 0x01, 0x1d, 0x1e, 0x0a,
    0x0c, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x02, 0x12, 0x04, 0xa9, 0x01, 0x02, 0x1f, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x02, 0x04, 0x12, 0x04, 0xa9, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x02, 0x05, 0x12, 0x04, 0xa9, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x02, 0x01, 0x12, 0x04, 0xa9, 0x01, 0x11, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x02, 0x03, 0x12, 0x04, 0xa9, 0x01, 0x1d, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x03, 0x02,
    0x03, 0x12, 0x04, 0xaa, 0x01, 0x02, 0x1f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x04,
    0x12, 0x04, 0xaa, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x06, 0x12,
    0x04, 0xaa, 0x01, 0x0b, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x01, 0x12, 0x04,
    0xaa, 0x01, 0x14, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x03, 0x12, 0x04, 0xaa,
    0x01, 0x1d, 0x1e,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
